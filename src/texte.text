import { Trash2 } from "lucide-react"; // IcÃ´ne de la poubelle

export default function Panier({ panier = [], setPanier, isOpen, setIsOpen, solde, setSolde }) {
    
    // Fonction pour augmenter la quantitÃ©
  const incrementer = (id) => {
    console.log("Avant incrÃ©mentation :", panier); // Voir l'Ã©tat du panier avant

    // Assurez-vous que le stock est suffisant pour l'incrÃ©mentation
    setPanier((prev) => {
      const updatedPanier = prev.map((item) => {
        // On vÃ©rifie d'abord si l'article a l'id correspondant
        if (item.id === id && item.stock > item.quantite) {
          return {
            ...item,
            quantite: item.quantite + 1, // IncrÃ©mente la quantitÃ©
          };
        }
        return item;
      });

      console.log("AprÃ¨s incrÃ©mentation :", updatedPanier); // Voir l'Ã©tat du panier aprÃ¨s
      return updatedPanier;
    });
  };



  // Fonction pour diminuer la quantitÃ©
  const decrementer = (id) => {
    console.log("Avant dÃ©crÃ©mentation :", panier); // Voir l'Ã©tat du panier avant
    setPanier((prev) => {
      const updatedPanier = prev.map((item) =>
        item.id === id && item.quantite > 1 // VÃ©rifie si la quantitÃ© est supÃ©rieure Ã  1
          ? { ...item, quantite: item.quantite - 1 } // Diminue la quantitÃ©
          : item
      );
      console.log("AprÃ¨s dÃ©crÃ©mentation :", updatedPanier); // Voir l'Ã©tat du panier aprÃ¨s
      return updatedPanier;
    });
  };

  // Calcul du total des articles
  const totalArticles = panier.reduce((total, item) => total + item.quantite, 0);
  // Calcul du total Ã  payer
  const totalPrix = panier.reduce(
    (total, item) => total + item.prix * item.quantite,
    0
  );

  // Fonction pour effectuer un paiement

  const payer = () => {
    console.log("Solde avant paiement:", solde); // VÃ©rifie l'Ã©tat du solde
    console.log("Total Ã  payer:", totalPrix); // VÃ©rifie le total Ã  payer

    if (solde < totalPrix) {
      alert("Vous n'avez pas assez d'argent pour effectuer cet achat.");
      return;
    }

    // RÃ©duire le solde aprÃ¨s paiement
    setSolde((prevSolde) => prevSolde - totalPrix);

    // RÃ©duire le stock aprÃ¨s achat
    setPanier((prev) =>
      prev.map((item) => ({
        ...item,
        stock: item.stock - item.quantite, // RÃ©duire le stock
      }))
    );

    // Vide le panier aprÃ¨s le paiement
    setPanier([]);
    alert(`Vous avez payÃ© ${totalPrix} â‚¬ pour ${totalArticles} article(s).`);
  };



  // Fonction pour retourner un article
  const retournerArticle = (id) => {
    const article = panier.find((item) => item.id === id);
    if (!article) return;
    
    // Ajouter le montant Ã  l'utilisateur
    setSolde((prevSolde) => prevSolde + article.prix * article.quantite);

    // RÃ©tablir le stock de l'article
    setPanier((prev) =>
      prev.map((item) =>
        item.id === id
          ? { ...item, stock: item.stock + article.quantite, quantite: 0 }
          : item
      )
    );
  };

  // Fonction pour supprimer un article
  const supprimer = (id) => {
    setPanier((prev) => prev.filter((item) => item.id !== id));
  };

  // Valeurs par dÃ©faut pour Ã©viter les erreurs liÃ©es Ã  undefined
  const soldeDisplay = solde && !isNaN(solde) ? solde : 0;
  const totalPrixDisplay = totalPrix && !isNaN(totalPrix) ? totalPrix : 0;

  return (
    <div
      className={`fixed top-0 right-0 h-full w-80 bg-[#5e4935] text-white shadow-lg transition-transform transform ${
        isOpen ? "translate-x-0" : "translate-x-full"
      }`}
    >
      {/* Header du panier */}
      <div className="p-4 border-b border-gray-300 flex justify-between items-center">
        <h2 className="text-lg font-bold">ðŸ›’ Panier ({totalArticles})</h2>
        <button
          className="text-lg font-bold text-white"
          onClick={() => setIsOpen(false)}
        >
          âœ–
        </button>
      </div>

      {/* Liste des articles */}
      <div className="p-4 space-y-4 overflow-y-auto h-[70%]">
        {panier.length === 0 ? (
          <p className="text-center text-gray-300">Votre panier est vide.</p>
        ) : (
          panier.map((item) => (
            <div
              key={item.id}
              className="flex justify-between items-center bg-[#78614f] p-2 rounded-lg"
            >
              <img src={item.image} alt={item.title} className="w-12 h-12 rounded-lg" />
              <div className="flex-1 px-2">
                <h3 className="text-sm font-semibold">{item.title}</h3>
                <p className="text-xs text-gray-200">{item.prix} â‚¬</p>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  className="bg-[#E6C28B] text-black px-2 rounded-md"
                  onClick={() => decrementer(item.id)}
                >
                  âž–
                </button>
                <span className="text-lg">{item.quantite}</span>
                <button
                  className="bg-[#E6C28B] text-black px-2 rounded-md"
                  onClick={() => incrementer(item.id)}
                  disabled={item.stock === 0} // DÃ©sactive si stock = 0
                >
                  âž•
                </button>
                <button onClick={() => supprimer(item.id)}>
                  <Trash2 className="text-red-400 w-5 h-5" />
                </button>
                {/* Retourner l'article */}
                <button
                  className="bg-red-500 text-white px-2 rounded-md"
                  onClick={() => retournerArticle(item.id)}
                >
                  Retourner
                </button>
              </div>
            </div>
          ))
        )}
      </div>

      {/* Totaux */}
      <div className="p-4 border-t border-gray-300">
        <div className="flex justify-between items-center mb-2">
          <span>Total articles:</span>
          <span>{totalArticles}</span>
        </div>
        <div className="flex justify-between items-center mb-4">
          <span>Total Ã  payer:</span>
          <span>{totalPrixDisplay.toFixed(2)} â‚¬</span>
        </div>

        {/* Solde de l'utilisateur */}
        <div className="flex justify-between items-center mb-4">
          <span>Solde disponible:</span>
          <span>{soldeDisplay.toFixed(2)} â‚¬</span>
        </div>

        {/* Bouton de paiement */}
        <button
          onClick={payer}
          className="w-full py-2 bg-[#E6C28B] text-black rounded-lg hover:bg-[#D4A92B] transition-all"
          disabled={panier.length === 0 || soldeDisplay < totalPrixDisplay}
        >
          Payer maintenant
        </button>
      </div>
    </div>
  );
}



MAins.jsx


import React, { useState } from "react";
import Data from "../../data.json"; // Importation du fichier JSON
import Articles from "./Elements/Articles"; // Importation du composant Articles
import Panier from "./Elements/Panier";
import Navbar from "../Component/Elements/NavBar"; // Importation de la Navbar

export default function Mains() {
  const [panier, setPanier] = useState([]);
  const [isOpen, setIsOpen] = useState(false); // Ã‰tat pour ouvrir/fermer le panier

  // Fonction pour ouvrir le panier
  const openCart = () => setIsOpen(!isOpen);

  return (
    <div>
      {/* Passer isOpen et openCart Ã  Navbar */}
      <Navbar openCart={openCart} panier={panier}/>

      <div className="mains flex flex-wrap gap-6 justify-center p-6 my-10 mx-20">
        {Data.articles.map((item) => (
          <Articles
            key={item.id}
            image={item.image_url}
            title={item.nom}
            description={item.description}
            prix={item.prix}
            quantite={item.quantite}
            categorie={item.categorie}
            marque={item.marque}
            couleur={item.couleur}
            garantie={item.garantie}
            addToCart={() => addToCart(item)} // Assurez-vous que la fonction addToCart existe
          />
        ))}
      </div>

      {/* Passer les props nÃ©cessaires Ã  Panier */}
      <Panier 
        panier={panier} 
        setPanier={setPanier} 
        isOpen={isOpen} 
        setIsOpen={setIsOpen} 
      />
    </div>
  );
}

